#include "variant.h"
#include <due_can.h>

#define SPEED                    CAN_BPS_50K
#define SAMPLING_POINT           1.4       // Add 1 to the sampling point

#define sda PIO_PC7
#define scl PIO_PC1

#define Serial SerialUSB

int counter = 0;
int counter2 = 0;
int stuffcnt = 0;
bool can_frame[27];
volatile bool sof = false;
bool start_counterattack = false;
uint16_t state = 0;
uint8_t len = 0;
volatile bool first_cycle = false;
volatile uint8_t retransmission_count = 0;

// Generated by canid_catch_less_than.py:
// using ECU CAN IDs: ['0x10', '0x20', '0x30', '0x3a', '0x40', '0x60', '0x70', '0x80', '0x83', '0x90', '0xa0', '0x100', '0x108', '0x110', '0x130', '0x150', '0x160', '0x180', '0x190', '0x1a0', '0x1a4', '0x1a8', '0x1b0', '0x1b4', '0x1b8', '0x1c0', '0x1e0', '0x200', '0x205', '0x210', '0x215', '0x217', '0x220', '0x225', '0x230', '0x240', '0x241', '0x250', '0x255', '0x260', '0x265', '0x270', '0x290', '0x295', '0x2a0', '0x2a7', '0x2b0', '0x2c0', '0x2d0', '0x2e0', '0x2f0', '0x2f5', '0x300', '0x310', '0x320', '0x330', '0x340', '0x345', '0x350', '0x360', '0x361', '0x363', '0x370', '0x3a0', '0x400', '0x405', '0x40a', '0x415', '0x435', '0x440', '0x465', '0x466', '0x467', '0x501', '0x503', '0x504', '0x505', '0x508', '0x509', '0x50b', '0x511', '0x526', '0x554', '0x567', '0x568', '0x56c', '0x581', '0x606', '0x634', '0x635', '0x656', '0x657', '0x675', '0x676', '0x677', '0x678', '0x67b', '0x690', '0x693', '0x696', '0x697', '0x6b0', '0x6b2', '0x701', '0x709', '0x720', '0x726', '0x727', '0x728', '0x72e', '0x72f', '0x731', '0x733', '0x735', '0x739', '0x73b', '0x73d', '0x740', '0x741', '0x744', '0x748', '0x749', '0x74c', '0x754', '0x75c', '0x770', '0x771', '0x772', '0x773', '0x775', '0x778', '0x779', '0x77a', '0x77b', '0x77d', '0x783', '0x78b', '0x791', '0x799', '0x7a5', '0x7a7', '0x7ad', '0x7af', '0x7b1', '0x7c2', '0x7c4', '0x7c6', '0x7ca', '0x7cc', '0x7ce', '0x7df', '0x7e3', '0x7eb']
// built for ECU bus ID: 0x7eb
void state_machine_run(uint8_t value) {
  
  bitWrite(state, 10 - len, value);
  len++;
  
  if (state > 2027) {
    return;
  }
  if (len == 11 && state == 2027) {
    start_counterattack = true;
    return;
  }
  if (len == 4 && state == 1152) {
    start_counterattack = true;
    return;
  }
  if (len == 5 && state == 192) {
    start_counterattack = true;
    return;
  }
  if (len == 5 && state == 960) {
    start_counterattack = true;
    return;
  }
  if (len == 5 && state == 1472) {
    start_counterattack = true;
    return;
  }
  if (len == 5 && state == 1728) {
    start_counterattack = true;
    return;
  }
  if (len == 6 && state == 896) {
    start_counterattack = true;
    return;
  }
  if (len == 6 && state == 1440) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 0) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 80) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 176) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 288) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 320) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 368) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 464) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 496) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 640) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 944) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 1056) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 1104) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 1136) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 1328) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 1344) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 1392) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 1424) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 1552) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 1568) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 1600) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 1632) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 1664) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 1696) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 1808) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 1888) {
    start_counterattack = true;
    return;
  }
  if (len == 7 && state == 2032) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 24) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 40) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 72) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 104) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 120) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 136) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 152) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 168) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 280) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 312) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 344) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 360) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 392) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 408) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 456) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 488) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 520) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 536) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 552) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 568) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 584) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 600) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 616) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 632) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 664) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 680) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 696) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 712) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 728) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 744) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 760) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 776) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 792) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 808) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 824) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 840) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 856) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 872) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 888) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 936) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 1048) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 1080) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 1096) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 1128) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 1304) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 1320) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 1368) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 1416) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 1544) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 1592) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 1624) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 1688) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 1720) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 1976) {
    start_counterattack = true;
    return;
  }
  if (len == 8 && state == 2000) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 20) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 36) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 52) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 60) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 68) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 100) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 116) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 132) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 148) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 164) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 260) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 268) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 276) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 308) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 340) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 356) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 388) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 404) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 428) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 444) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 452) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 484) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 564) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 580) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 628) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 692) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 708) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 724) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 740) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 772) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 788) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 804) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 820) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 852) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 868) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 884) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 932) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1036) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1040) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1072) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1092) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1120) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1292) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1300) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1312) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1360) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1376) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1412) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1536) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1584) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1616) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1648) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1660) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1716) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1796) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1804) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1872) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1880) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1924) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1932) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1940) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1948) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1952) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1960) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 1972) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 2008) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 2020) {
    start_counterattack = true;
    return;
  }
  if (len == 9 && state == 2028) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 18) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 34) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 50) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 56) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 66) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 98) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 114) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 146) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 162) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 258) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 266) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 274) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 306) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 338) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 354) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 386) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 402) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 418) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 422) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 426) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 434) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 438) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 442) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 450) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 482) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 514) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 518) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 530) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 546) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 550) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 562) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 578) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 594) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 598) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 610) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 614) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 626) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 658) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 662) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 674) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 676) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 690) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 706) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 722) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 738) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 754) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 758) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 770) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 786) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 802) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 818) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 834) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 838) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 850) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 882) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 930) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1026) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1030) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1032) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1046) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1078) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1090) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1286) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1298) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1316) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1366) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1380) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1386) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1390) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1410) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1540) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1590) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1620) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1684) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1794) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1802) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1826) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1828) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1834) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1836) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1846) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1854) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1858) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1862) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1866) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1870) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1878) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1886) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1910) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1918) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1920) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1928) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1938) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1946) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1970) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1984) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 1992) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 2012) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 2016) {
    start_counterattack = true;
    return;
  }
  if (len == 10 && state == 2024) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 17) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 33) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 49) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 59) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 65) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 97) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 113) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 129) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 130) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 145) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 161) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 257) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 265) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 273) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 305) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 337) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 353) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 385) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 401) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 417) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 421) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 425) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 433) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 437) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 441) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 449) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 481) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 513) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 516) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 529) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 532) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 534) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 545) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 548) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 561) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 593) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 596) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 609) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 612) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 625) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 657) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 660) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 673) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 678) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 689) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 705) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 721) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 737) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 753) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 756) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 769) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 785) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 801) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 817) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 833) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 836) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 849) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 866) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 881) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 929) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1025) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1028) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1035) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1044) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1076) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1089) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1124) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1280) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1282) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1290) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1296) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1319) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1365) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1382) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1385) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1389) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1408) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1543) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1652) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1657) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1658) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1681) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1682) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1713) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1715) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1792) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1800) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1825) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1833) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1840) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1842) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1844) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1848) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1850) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1852) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1861) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1869) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1877) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1885) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1908) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1916) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1922) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1930) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1936) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1944) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1956) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1958) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1964) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1966) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1968) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1987) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1989) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1991) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1995) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1997) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 1999) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 2014) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 2018) {
    start_counterattack = true;
    return;
  }
  if (len == 11 && state == 2026) {
    start_counterattack = true;
    return;
  }
  return;
}
// End generated code



void reset_state_machine() {
    state = 0;
    len = 0;
}

void TC3_Handler() {
    TC_GetStatus(TC1, 0);

    PIOC->PIO_CODR = sda;   // External Timer
    PIOC->PIO_SODR = sda;

    bool value = PIOA->PIO_PDSR & PIO_PA1A_CANRX0;

    if (sof == true) {    // Start arbitration
        counter2++;
        if (counter2 < 25 && !start_counterattack) {
            if (can_frame[counter2 - 2] != value && stuffcnt == 5) {
                stuffcnt = 0;
                counter2--;
            }
            else if (can_frame[counter2 - 2] == value && stuffcnt < 5) {
                can_frame[counter2 - 1] = value;
                state_machine_run(value);
                stuffcnt++;
            }
            else if (can_frame[counter2 - 2] != value && stuffcnt < 5) {
                can_frame[counter2 - 1] = value;
                state_machine_run(value);
                stuffcnt = 1;
            }
        }

        if (first_cycle == true) {
            first_cycle = false;
            NVIC_DisableIRQ(TC3_IRQn);
            startTimer(TC1, 0, TC3_IRQn, SPEED);
        }

        if (counter2 == 21) {
            PIOA->PIO_PDR = PIO_PA0A_CANTX0;
            PIOA->PIO_ODR = PIO_PA0A_CANTX0;
            sof = false;
            counter2 = 0;
            retransmission_count++;
        }

        else if (counter2 == 14) {
            if (start_counterattack == true) {    // Counterattack
                start_counterattack = false;
                PIOA->PIO_PER = PIO_PA0A_CANTX0;    // Multiplex CAN_TX to GPIO
                PIOA->PIO_OER = PIO_PA0A_CANTX0;    // Define CAN_TX as output
                PIOC->PIO_CODR = PIO_PA0A_CANTX0;   // set pin to LOW
            }
        }
    }
    else {    // Keep for retransmissions
        if (value == 1) {
            counter++;
        }
        else if (value == 0 && counter < 11) {
            counter = 0;
        }

        if (counter >= 11 && value == 0) {    //SOF
            sof = true;
            counter = 0;
            stuffcnt = 1;
            can_frame[0] = 0;
            counter2 = 1;
            reset_state_machine();
        }
    }

    PIOC->PIO_CODR = scl;   // External Timer
    PIOC->PIO_SODR = scl;
}

void startTimer(Tc* tc, uint32_t channel, IRQn_Type irq, uint32_t frequency) {

    //Enable or disable write protect of PMC registers.
    pmc_set_writeprotect(false);
    //Enable the specified peripheral clock.
    pmc_enable_periph_clk((uint32_t)irq);

    TC_Configure(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC | TC_CMR_TCCLKS_TIMER_CLOCK4);
    uint32_t rc = VARIANT_MCK / 128 / frequency;

    TC_SetRA(tc, channel, rc / 2);
    TC_SetRC(tc, channel, rc);
    TC_Start(tc, channel);

    tc->TC_CHANNEL[channel].TC_IER = TC_IER_CPCS;
    tc->TC_CHANNEL[channel].TC_IDR = ~TC_IER_CPCS;
    NVIC_EnableIRQ(irq);
}

void MichiCAN_Sync() {
    first_cycle = true;
    sof = true;
    counter = 0;
    can_frame[0] = 0;
    counter2 = 1;
    stuffcnt = 1;
    reset_state_machine();
    NVIC_DisableIRQ(TC3_IRQn);
    startTimer(TC1, 0, TC3_IRQn, (1 / SAMPLING_POINT) * SPEED);
    detachInterrupt(PIO_PA1A_CANRX0);
}

void setup() {

    // start serial port at 115200 bps:
    Serial.begin(115200);

    // Verify CAN0 and CAN1 initialization, baudrate is 1Mb/s:
    if (Can0.begin(SPEED) &&
        Can1.begin(SPEED)) {
    }
    else {
        Serial.println("CAN initialization (sync) ERROR");
    }

    PMC->PMC_PCER0 |= PMC_PCER0_PID11; // PIOA power ON

    //Multiplex CAN_RX to GPIO (Peripheral Enable Register)
    PIOA->PIO_PER = PIO_PA1A_CANRX0;

    //Set CAN_RX as input (Ouput Disable Register)
    PIOA->PIO_ODR = PIO_PA1A_CANRX0;

    //Disable pull-up on both pins (Pull Up Disable Register)
    PIOA->PIO_PUDR = PIO_PA1A_CANRX0;
    PIOA->PIO_PUDR = PIO_PA0A_CANTX0;

    //Use Pins 33 and 35 for external time measurement on ESP32
    PIOC->PIO_PER = scl;
    PIOC->PIO_PER = sda;

    //Set Pins 33 and 35 as output (Ouput Enable Register)
    PIOC->PIO_OER = scl;
    PIOC->PIO_OER = sda;

    Can0.watchFor();
}

void loop()
{
    if (sof == false) {
        attachInterrupt(PIO_PA1A_CANRX0, MichiCAN_Sync, FALLING); //Indicates SOF
    }
}
